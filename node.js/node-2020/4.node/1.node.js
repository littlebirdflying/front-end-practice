/**
 * node中的概念
 */


// deno (默认支持es6 远程导入 promise) node + babel非常成熟并且非常强大的生态

// 概念 node是什么？ 不是一门语言 核心 就是一个让js可以运行在服务端的运行时(我们可以使用js来实现服务端或者工具)

// js 有几部分组成 DOM+BOM+ECMASCRIPT

// node中只能使用ECMASCRIPT语法本身 + node提供的内置模块(fs,http...) + npm包

// 中间层 解决跨域 格式化数据 权限校验

// ssr 服务端渲染 react vue = node可以解析react vue语法渲染后返回给浏览器 nuxt nest

// 打包工具 webpack rollup 前端可以通过node来实现各种各样的工具

// node做服务端没优势 刚开始是为了和web密切结合的

// 主线程(接收请求)是单线程的

// java 多线程每次请求都开一个线程(线程池) 请求过多的话 浪费资源， 锁的问题(多个线程操作同一个资源)，通过时间片切换感觉是并发做事 切换时间片也是有性能消耗 java可以利用多线程来实现加密 压缩(适合cpu密集型 计算)


// 高并发都是单线程异步 node本身有个libuv库 内部用多线程来实现异步的
// node中没有锁 就只有一个主线程(内存消耗少) 如果主线程工作量大会有阻塞问题。不适合cpu密集型。适合i/o密集。 可以开子进程 多个进程可以充分利用cpu内核


// 异步 非阻塞、 java同步 阻塞 (同步、非阻塞)
// 是否阻塞指的是调用方 是否异步指的是被调用方    一个方法是不是异步的  调用时状态是不是阻塞的

// nvm-win切换版本
// brew install nvm可以切换node版本 win7 最高是12 win10可以升级到14
// 通过n模块来升级 windows可以直接覆盖安装