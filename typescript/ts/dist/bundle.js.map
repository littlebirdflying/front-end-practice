{"version":3,"file":"bundle.js","sources":["../src/index.ts"],"sourcesContent":["// https://www.tslang.cn/docs/home.html\r\n// 1.基础类型\r\n// 最基本的类型 数字 字符串 布尔\r\n// 所有类型都在冒号的后面，ts的核心一切都已安全为准\r\n// 什么时候可以不用类型，推导\r\n// number和Number的区别 js特性 装箱的概念 xxx.xxx\r\nlet num1: number = 1;\r\nlet num2: Number = 1; // 用来描述实例的 类也可以当做类型 这里1也是Number的实例\r\nlet num3: number = Number(1);\r\nlet num4: Number = new Number(1);\r\nlet str1:String = new String('tm')\r\n\r\n\r\n// 最基本\r\nlet num: number = 1;\r\nlet str: string = \"tm\";\r\nlet bool: boolean = true;\r\n\r\n// 数组类型 数组的概念：一类类型的集合\r\nconst arr:number[] = [] // number组成的数组\r\nconst arr2:(number | string)[] = ['a', 1] // | 并集的含义\r\nconst arr3:any[] = ['', 1,{}] // 数组里放任何类型，不能类型推断，都是any了\r\nconst arr4:Array<boolean> = [true,false] // 另一种定义数组的方式，泛型的方式\r\n\r\n\r\n// 元组 ts中自己实现的 内容固定 类型固定\r\nconst tuple:[string,boolean,number] = ['a', true, 1] // 初始化 必须按照要求填入数据\r\n// 操作元组\r\nlet r = tuple.pop() // pop的有可能是这四种类型 let r: string | number | boolean | undefined\r\ntuple.push('str') // 在放入时 可以放入元组中定义的类型\r\ntuple[2] = 100\r\n// tuple[3] = 100 // 利用索引不能超出长度 Type '100' is not assignable to type 'undefined'.ts(2322)\r\n\r\n// 数据交换 会用到元素 结合泛型"],"names":[],"mappings":";;;CAyBA;CACA,IAAM,KAAK,GAA2B,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,CAAA;CACpD;CACQ,KAAK,CAAC,GAAG,GAAE;CACnB,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;CACjB,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,CAAA;CACd;CAEA;;;;;;"}